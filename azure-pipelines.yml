trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - script: |
      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      sudo dpkg -i google-chrome-stable_current_amd64.deb
      sudo apt-get install -f
      sudo apt-get update
      sudo apt-get install -y chromium-chromedriver
      sudo ln -s /usr/bin/chromedriver /usr/local/bin/chromedriver
    displayName: 'Instalar Google Chrome y ChromeDriver'

  - script: |
      google-chrome --version
      chromedriver --version
    displayName: 'Verificar instalaci√≥n de Google Chrome y ChromeDriver'

  # Ejecuta las pruebas usando Maven
  - task: Maven@4
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      jdkArchitectureOption: 'x64'
      goals: 'verify'   # Primero ejecuta las pruebas

  # Genera el reporte de Serenity
  - task: Maven@4
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      jdkArchitectureOption: 'x64'
      goals: 'serenity:aggregate'   # Luego genera el reporte de Serenity

  # Publica los resultados de las pruebas
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/target/site/serenity/*.xml'
      testRunTitle: 'Serenity Test Results'

  # Copia los archivos del reporte de Serenity
  # - task: CopyFiles@2
  #   inputs:
  #     contents: '**/target/site/serenity/**/*'
  #     targetFolder: '$(Build.ArtifactStagingDirectory)/serenity'

  # Publica los artefactos del build
  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     pathToPublish: '$(Build.ArtifactStagingDirectory)/serenity'
  #     artifactName: 'SerenityReports'
  #     publishLocation: 'Container'